def maybeDeferredGenerator(f, *args, **kw):
    try:
        result = f(*args, **kw)
    except Exception, e:
        tb = traceback.format_exc()
        #if not hasattr(e, "_monocle"):
        #    e._monocle = {'tracebacks': []}
        #e._monocle['tracebacks'].append(tb)
        return defer(e)

    if isinstance(result, types.GeneratorType):
        return _monocle_chain(None, result, Deferred())
    elif isinstance(result, Deferred):
        return result
    elif isinstance(result, TwistedDeferred):
        return result  # FIXME -- convert
    return defer(result)


# @_o
def _o(f):
    """
    monocle helps you write Deferred-using code that looks like a regular
    sequential function.  For example::

        @_o
        def foo():
            result = yield makeSomeRequestResultingInDeferred()
            print result

    When you call anything that results in a Deferred, you can simply yield it;
    your generator will automatically be resumed when the Deferred's result is
    available. The generator will be sent the result of the Deferred with the
    'send' method on generators, or if the result was a failure, 'throw'.

    Your coroutine-enabled generator will return a Deferred object, which
    will result in the return value of the generator (or will fail with a
    failure object if your generator raises an unhandled exception). Note that
    you can't use "return result" to return a value; use "yield result"
    instead. Falling off the end of the generator, or simply using "return"
    will cause the Deferred to have a result of None.

    The Deferred returned from your generator will call back with an
    exception if your generator raised an exception::

        @_o
        def foo():
            result = yield makeSomeRequestResultingInDeferred()
            if result == 'foo':
                # this will become the result of the Deferred
                yield 'success'
            else:
                # this too
                raise Exception('fail')
    """
    def unwindGenerator(*args, **kwargs):
        return maybeDeferredGenerator(f, *args, **kwargs)
    return mergeFunctionMetadata(f, unwindGenerator)
